package com.example.ToDo.ServiceImplementation;

import com.example.ToDo.Converter.UserConverter;
import com.example.ToDo.DTO.UserRequest;
import com.example.ToDo.Helper.MyAnalyzer;
import com.example.ToDo.JWT_PACKAGE.JwtService;
import com.example.ToDo.Model.User;
import com.example.ToDo.Repository.UserRepository;
import com.example.ToDo.ServiceInterface.UserService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.Optional;

@Slf4j
@Service
public class UserServiceImplementation implements UserService {

    private final JwtService jwtService;
    private final UserRepository userRepository;
    private final MyAnalyzer myAnalyzer;

    public UserServiceImplementation(JwtService jwtService, UserRepository userRepository, MyAnalyzer myAnalyzer) {
        this.jwtService = jwtService;
        this.userRepository = userRepository;
        this.myAnalyzer = myAnalyzer;
    }


    @Override
    public User getUserByEmail(String email) {
        email = myAnalyzer.stem(email);
        Optional<User> user = userRepository.findByEmail(email);
        if(user.isPresent()) return user.get();
        return null;
    }

    @Override
    public User registerUser(UserRequest userRequest) {
        String processedEmail = myAnalyzer.stem(userRequest.getEmail());
        userRequest.setEmail(processedEmail);
        if(userRepository.existsByEmail(userRequest.getEmail())) return null;
        User user = UserConverter.UserRequestToUser(userRequest);
        return userRepository.save(user);
    }


}
