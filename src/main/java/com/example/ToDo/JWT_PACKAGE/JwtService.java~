package com.example.ToDo.JWT_PACKAGE;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.JwtParser;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Service;

import javax.crypto.SecretKey;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

@Service
public class JwtService {

    private final SecretKey key = Keys.hmacShaKeyFor(JwtConstant.SECRET_KEY.getBytes());
    private final long EXPIRATION_TIME = 1000 * 60 * 60; // 1 hour

    private final JwtParser jwtParser;

    public JwtService(JwtParser jwtParser) {
        this.jwtParser = jwtParser;
    }

    public boolean ValidateToken(String token) { // Validate token
        try {
            parseToken(token); // Attempt to parse the token
            return true; // If successful, the token is valid
        } catch (RuntimeException e) {
            return false; // If an exception occurs, the token is invalid
        }
    }

    public Claims parseToken(String token) { // Parse token
        try {
            return jwtParser.parseClaimsJws(token).getBody();
        } catch (Exception e) {
            throw new RuntimeException("Invalid token", e);
        }
    }

    public String emailFromClaims(String token) { // Get email from claims
        Claims claims = parseToken(token);
        return claims.get("email", String.class);
    }

    public String passwordFromClaims(String token) { // Get password from claims
        Claims claims = parseToken(token);
        return claims.get("password", String.class);
    }

    public String generateToken(String username) {
        Map<String, Object> claims = new HashMap<>();
        return createToken(claims, username);
    }

    private String createToken(Map<String, Object> claims, String subject) {
        return Jwts.builder()
                .setClaims(claims)
                .setSubject(subject)
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                .signWith(key)
                .compact();
    }


}